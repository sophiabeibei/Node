课程大纲:
    1.第一周
        git node基础
    2.第二周
        http,fs
    3.第三周
        node框架express,koa
    4.第四周,第五周
        react框架


一.git
    git: 版本控制系统;管理代码版本;
    http://www.zhufengpeixun.cn/docs/html/Git/git入门.html
    1.记住是谁提交的东西;
    2.可以保存每各阶段的内容(备份内容);
    3.可以实现历史穿越;
    4.github开源,多端共享
    5.团队协作;

    linus开发的是linux系统,开发git后可以实现自动合并代码;比较diff(不同);


    使用git
    1.界面化操作gui(source tree 编辑器自带git功能)
    2.命令行操作cli

    mac下
    1.iterm2工具+oh-my-zsh工具
    2.如果安装过xcode,会自动安装git

    查看git版本
    git --version

    linux命令
    0.mkdir 文件名: 创建文件;
    1.pwd: print working directory打印当前
    2.rm -rf .git(删除文件夹)
    3.ls: list show显示所有列表
    4.cd: change directory改变目录
    5.touch: 创建一个空文件    touch index.txt
    6.vi 文件名: 编辑文件      vi index.txt
        1.i: 插入模式             按i键之后,出现"插入"可编辑文件的内容;
        2.esc键+:wq 保存并退出;
    7.cat 文件名: 查看文件内容;


    git和svn的区别:
    git不能直接将工作区的内容推送到历史区;git会将需要的文件放在.git下;
    svn没有过渡区;svn一提就提到历史区;并且svn每个文件下都有一个.svn文件;

    git命令
        git status: 查看信息状态  如果是红色表示未添加到暂存区;
        git add .或者-A或者加文件名: 提交到暂存区;
        git commit -m"描述更新的内容": 添加到历史区(版本库);
        git log: 查看git所有的日志(版本id);

        git diff: 比较某个区的不同;
            工作区 <--> 暂存区: git diff
            暂存区 <--> 历史区: git diff --cached
            历史区 <--> 工作区: git diff master(分支名,一般是master)
        git checkout .: 将所有的文件从暂存区回滚到工作区;
        git reset HEAD index.txt(文件名): 回到上一次暂存区的东西;

        history >1.txt: 把历史命令导出到1.txt文件中;

        git log;从这里选择一段代码;: 可以看到所有的版本号;
        git reset --hard 随便粘贴一段代码(版本号): 回滚历史区;


        git reflog: 查看所有的版本号;

        git branch dev: 创建分支;
        git branck D 分支名: 删除分支(不能在当前分支上)
        git checkout -b 分支名: 创建并切换分支;

        在分支上添加文件
            需要提交后才能归这个分支所有,否则你改的只是工作区内容;


        git merge dev(分支名): 在master上合并dev;
        默认会将分支上所有提交的内容全部合并;


        针对提交过一次的信息,第二次提交可连写,如下:
        git commit -a -m"add wo zai shang ke"

        提交到谁的身上,本次的结果才归某个分支所有;


        可以按照以下顺序操作一遍进行练习:
        260  mkdir git-pro1
        261  cd git-pro1
        262  git init
        267  git branch
        268  git checkout -b dev
        269  git branch
        270  git checkout master
        272  git checkout -b master
        273  git branch
        274  touch index.txt
        275  git add .
        276  git commit -m 'index.txt'
        278  git checkout -b dev
        279  vi index.txt
        280  git commit -a -m"add zfpx"
        282  git checkout master
        283  git merge dev
        284  cat index.txt
        286  git checkout dev
        287  vi index.txt
        288  cat index.txt
        289  git checkout master
        290  cat index.txt
        292  git checkout dev
        293  git add .
        294  git checkout dev
        295  git checkout master
        297  cat index.txt
        298  git checkout dev
        299  git commit -m 'add hello'
        301  git checkout master
        302  cat index.txt
        303  git checkout dev
        304  vi index.txt: 编辑index.txt文件;
        306  git checkout master
        308  git commit -a -m 'add world': 针对提交过一次的信息,第二次提交可连写;
        309  git checkout master
        310  cat index.txt 查看index.txt文件的内容;
        312  git log
        314  git checkout dev: 切换dev分支;
        316  git log
        318  git checkout master: 切换master分支;
        319  git merge dev: 在master分支上合并dev分支的内容
        320  git log: 查看git操作的日志;
        322  git branch -D dev: 删除dev分支


        查看图表
        git log --graph

        查看图表
        git log --graph --online



        必须是历史区的结果
        执行命令
            git add
            git commit -m""
            git remote add origin +仓库地址;
                git remote -v查看远程链接的仓库
                git remote rm +仓库名: 删除指定的仓库;
            git push -u origin master: 推送到分支master上; -u: 下次再推送可以省略origin master这两词;

        .gitignore: 放.idea等文件名;过滤不需要推送的文件名;
        .gitkeep: git的保留;


        发布静态网站
            1.要求有一个固定的分支(这个分支名不能更改gh-pages)
            2.将静态内容推送到这个分支上;
            3.创建分支
                git checkout -b gh-pages
                touch index.html
                git add .
                git commit -m"描述"
                git push origin gh-pages

















