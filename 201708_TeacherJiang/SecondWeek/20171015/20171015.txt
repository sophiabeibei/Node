node基础
    1.安装node
        安装后,
        node -v
        npm -v

    2.add to path(配置环境变量)
        添加到环境变量
        nvm-windows
        mac下nvm,windows:nvm-windows 切换版本;


    node是为js提供了运行的环境;


    4.回调函数(异步)
        解决异步变成的问题;将后续的逻辑当作参数传递给另一个函数;当函数执行后,调用传递的函数;

        前端异步的有: 定时器,事件绑定,ajax,callback;
        在node中有: 定时器,callback;

    5.单线程(node)和多线程(java);
        同一时刻只能干一件事(单线程);切换时间片段频率高,速度快,感觉像干了多件事(多线程);如果主线程,干的业务过重,此时会阻塞主线程;node可以开多个进程(进程包含线程;一个进程只能有一个线程);

    5.同步异步
        异步不会阻塞主线程(在编程观念上,异步约等于多线程);
        经典案例: 服务员点餐;

    6.阻塞非阻塞
        针对的是内核来说的;阻塞肯定不是异步;

    7.io操作
        io: 输入输出;input output;文件读写操作;

    8.事件环
        事件一环扣一环;可以默认认为有两个小本(两个事件队列),一个叫当前队列(同步代码);另一个是异步队列(异步代码);

    在node中不具备DOM,BOM;
        node中只识别js;
        优点:
            1.chrome v8引擎;速度快;写代码很爽;不需要考虑兼容性;
            2.因为是后台语言,可以操作文件;
            3.而且支持模块化(node天生自带模块化的功能);

        缺点:
            不是多线程;

        node的使用
            node的中间层;(比如:前端访问服务器发http请求);
            node自己做后台开发;
            社区活跃;地址: cnodejs.org;

        全局对象(global)
            在文件中可以不声明直接使用的我们可以叫他全局变量;



commonjs模块化
    commonjs规范: 规定的模块化风格;

    模块化的好处:
    1.防止命名冲突;
    2.提高代码复用性;
    3.高内聚低耦合;
    4.分工协作,统一代码风格,方便代码维护;

    1.定义如何创建模块: 每个js都是一个模块;
    2.如何导入一个模块: require导入一个模块;
    3.如何导出一个模块: exports/module.exports;


    模块分为三类:
        1.文件模块;
        2.第三方模块;
        3.内置模块


    文件模块:
        特点: 引用的时候必须加./;可以省略.js后缀;可以省略.json后缀,可以省略.node后缀;但一般都写上不去省略;引用多次,只会执行一次(默认会缓存);

    第三方模块:
        特点: 必须下载;

        1.全局第三方模块:
            特点: 在命令行使用;
            npm install: 通过这个下载;
            2.taobao源;
            3.cnpm源;
            安装一个模块
            npm install nrm -g: node的源管理工具;
            nrm ls: 查看所有源;
            nrm use taobao: 使用taobao源;
            nrm test: 测网速;
            npm root -g: 查看全局安装位置;
            npm config list: 查看配置列表;

        http-server
        npm install http-server -g:
        http-server: 选择需要启动服务的文件夹执行即可;

        简易版的xmpp

        2.本地第三方模块
            特点: 在项目中使用;
            进入文件夹,再初始化;
            初始化package.json: 记录安装的依赖有哪些;

            1.开发依赖: 只在开发时使用;
            2.项目依赖: 开发上线都需要;


            1.开发依赖:
                npm install less --save-dev: 保存为开发依赖;
                npm install: 跑环境;

            2.项目依赖:
                npm install jquery
                npm install jquery@3.2.1

            yarn安装(安装第三方软件)
                npm install yarn -g:
                yarn init
                yarn add jquery: 项目依赖
                yarn add less --dev: 开发依赖
                yarn install: 跑环境;安装所有依赖;



            往npm上发布包;
            发布包: 包由多个模块组成;
                1.指定一个入口文件;package.json中main对应的文件;创建一个main.js;里面写的内容,最后要导出(三种方式);
                2.需要有package.json文件;
                3.要有readme.md文件;写上包的作用;
                4.入口文件,package.json => main文件;
                5.进入到需要发布的文件夹内;
                6.切换到国外源;保证发布到npm上去;
                7.注册或者登录用户;
                npm addUser回车  不要在gitbash下操作;
                8.发布到npm: npm publish

            删除发布的包
                npm unpublish --force回车

            重新发布包,要提升版本;

        module.paths: 查找模块的路径;如果当前目录下没找到,则会去上级目录查找;直到找到根目录为止;找不到就报错;
        console.log(module);
        //exports require module
        //__filename 当前文件的绝对路径
        //__dirname 当前文件夹的绝对路径
        console.log(__filename,__dirname);

        内置模块(path)
        .........略;没听懂;没记笔记;








    3.配置webstorm的git
        vcs ->enable ->git
        在初始化过git的文件下右键











