今天的课程,接昨天的讲;案例在昨天(20171024)

一.nodemon
    npm install -g nodemon

    //->执行文件
    nodemon +文件名
    nodemon serverClient.js
        返回一个[nodemon]starting `node serverClient.js`开启这样一个服务














[一.]教程
一.介绍
    1.Vue.js是什么
        Vue.js(读音/vju:/,类似于view)是一套构建用户界面的渐进式框架;与其他重量级框架不同的是,Vue采用自底向上增量开发的设计;Vue的核心库只关注视图层,它不仅易于上手,还便于与第三方或既有项目整合;另一方面,当与单文件组件和Vue生态系统支持的库结合使用时,Vue也完全能够为复杂的单页应用程序提供驱动;

        如果你是有经验的前端开发者,想知道Vue.js与其它 库/框架的区别,查看对比其它框架;

    2.起步
        官方指南假设你已有HTML,CSS和JavaScript中级前端知识;如果你刚开始学习前端开发,将框架作为你的第一步可能不是最好的主意--掌握好几处知识再来!之前有其他框架的使用经验对于学习Vue.js是有帮助的,但这不是必须的;

        尝试Vue.js最简单的方法是使用JSFiddle Hello World例子;你可以在浏览器新标签页面中打开它,跟着例子学习一些基础用法;或者你也可以创建一个.html文件;然后通过如下方式引入Vue:
            <script src="https://unpkg.com/vue"></script>
        你可以查看安装教程来了解其他安装Vue的选项;请注意我们不推荐新手直接使用vue-cli,尤其是对Node.js构建工具不够了解的同学;

    3.声明式渲染
        Vue.js的核心是一个允许采用简洁的模板语法来声明式的将数据渲染进DOM的系统:
        <div id="app">
            {{message}}
        </div>

        var app = new Vue({
            el: "#app",
            data: {
                message: "Hello Vue!"
            }
        });

        Hello Vue!


        我们已经生成了我们的第一个Vue应用!看起来这跟单单渲染一个字符串模板非常类似,但是Vue在背后做了大量工作;现在数据和DOM已经被绑定在一起,所有的元素都是响应式的;我们该如何知道呢?打开你的浏览器的控制台(就在这个页面打开),并修改app.message,你将看到上例相应地更新;

        除了文本插值,我们还可以采用这样的方式绑定DOM元素属性:

        <div id="app-2">
            <span v-bind:title="message">
                鼠标悬停几秒钟查看此处动态绑定的提示信息!
            </span>
        </div>

        var app2 = new Vue({
            el: "#app-2",
            data: {
                message: "页面加载于" + new Date().toLocaleString();
            }
        });

        鼠标悬停几秒钟查看此处动态绑定的提示信息!

        这里我们遇到点新东西;你看到的v-bind属性被称为指令;指令带有前缀v-,以表示它们是Vue提供的特殊属性;可能你已经猜到了,它们会在渲染的DOM上应用特殊的响应式行为;简言之,这里该指令的作用是:"将这个元素节点的title属性和Vue实例的message属性保持一致";

        再次打开浏览器的javaScript控制台输入app2.message = "新信息",就会再一次看到这个绑定了title属性的HTML已经进行了更新;

    4.条件与循环
        控制切换一个元素的显示也相当简单:
        <div id="app-3">
            <p v-if="seen">现在你看到我了</p>
        </div>

        var app3 = new Vue({
            el: "#app",
            data: {
                seen: true
            }
        });

        现在你看到我了

        继续在控制台设置app3.seen = false,你会发现"现在你看到我了"消失了;

        这个例子演示了我们不仅可以绑定DOM文本到数据,也可以绑定DOM结构到数据;而且,Vue也提供一个强大的过渡效果系统,可以在VUe插入/更新/删除元素时自动应用过渡效果;

        还有其它很多指令,每隔都有特殊的功能;例如: v-for指令可以绑定数组的数据来渲染一个项目列表:
        <div id="app-4">
            <ol>
                <li v-for="todo in todos">
                    {{todo.text}}
                </li>
            </ol>
        </div>

        var app4 = new Vue({
            el: "#app-4",
            data: {
                todos: [
                    {text: "学习 JavaScript"},
                    {text: "学习 Vue"},
                    {text: "整个牛项目"}
                ]
            }
        });

        1.学习JavaScript
        2.学习Vue
        3.整个牛项目

        在控制台里,输入app4.todos.push({text: "新项目"});你会发现列表中添加了一个新项;

    5.处理用户输入
        为了让用户和你的应用进行互动,我们可以用v-on指令绑定了一个事件监听器,同故宫它调用我们Vue实例中定义的方法:
        <div id="app-5">
            <p>{{message}}</p>
            <button v-on:click="reverseMessage">逆转消息</button>
        </div>

        var app5 = new Vue({
            el: "#app-5",
            data: {
                message: "Hello Vue.js!"
            },
            methods: {
                reverseMessage: function(){
                    this.message = this.message.split("").reverse().join("");
                }
            }
        });

        Hello Vue.js!
        逆转消息

        注意在reverseMessage方法中,我们更新了应用的状态,但没有触碰DOM--所有的DOM操作都由Vue来处理,你编写的代码不需要关注底层逻辑;

        Vue还提供了v-model指令,它能轻松实现表单输入和应用状态之间的双向绑定;

        <div id="app-6">
            <p>{{message}}</p>
            <input v-model="message">
        </div>

        var app6 = new Vue({
            el: "#app-6",
            data: {
                message: "Hello Vue!"
            }
        });

        Hello Vue!
        Hello Vue!

    6.组件化应用构建
        组件系统是Vue的另一个重要概念,因为它是一种抽象,允许我们使用小型,独立和通常可复用的组件构建大型应用;仔细想想,几乎任意类型的应用界面都可以抽象为一个组件树;

        在Vue里,一个组件本质上是一个拥有预定义选项的一个Vue实例,在Vue中注册组件很简单:
        //定义名为todo-item的新组件
        Vue.component("todo-item",{
            template: "<li>这是个待办项</li>"
        })
        现在你可以用它构建另一个组件模板:
        <ol>
            <!-- 创建一个todo-item组件的实例-->
            <todo-item></todo-item>
        </ol>

        但是这样会为每隔待办项渲染同样的文本,这看起来并不炫酷,我们应该能将数据从父作用域传到子组件;让我们来修改以下组件的定义,使之能够接收一个属性:
        Vue.component("todo-item",{
            //todo-item 组件现在接收一个
            //"prop",类似于一个自定义属性
            //这个属性名todo
            props: ["todo"],
            template: "<li>{{todo.text}}</li>"
        });

        现在,我们可以使用v-bind指令将todo传到每一个重复的组件中:
        <div id="app-7">
            <ol>
                <!--
                    现在我们为每隔todo-item提供todo对象
                    todo对象是变量,即其内容可以是动态的
                    我们也需要为每隔组件提供一个"key",晚些时候我们会做个解释;
                -->
                <todo-item
                    v-for="item in groceryList"
                    v-bind:todo="item"
                    v-bind:key="item.id">
                </todo-item>
            </ol>
        </div>

        Vue.component("todo-item",{
            props: ["todo"],
            template: "<li>{{todo.text}}</li>"
        });

        var app7 = new Vue({
            el: "#app-7",
            data: {
                groceryList: [
                {id: 0,text: "蔬菜"},
                {id: 1,text: "奶酪"},
                {id: 2,text: "随便其他什么人吃的东西"}
                ]
            }
        });

        1.蔬菜
        2.奶酪
        3.随便其他什么人吃的东西

        这只是一个假设的例子,但是我们已经设法将应用分割成两个更小的单元,子单元通过props接口实现了与负担元很好的解耦;我们现在可以进一步为我们的todo-item组件实现更复杂的模板和逻辑的改进,而不是影响到父单元;

        在一个大型应用中,有必要将整个应用程序划分为组件,以使开发可管理;在后续教程中我们将详述组件,不过这里有一个(假想的)使用了组件的应用模板是什么样的例子:
        <div id="app">
            <app-nav></app-nav>
            <app-view>
                <app-sidebar></app-sidebar>
                <app-content></app-content>
            </app-view>
        </div>


    6.1.与自定义元素的关系
        你可能已经注意到Vue组件非常类似于自定义元素--它是Web组件规范的一部分,这是因为Vue的组件语法部分参考了该规范;例如VUe组件实现了Slot API与is特性;但是,还是有几个关键差别:
        1.Web组件规范仍然处于草案阶段,并且尚无浏览器原生实现;相比之下,Vue组件不需要任何补丁,并且在所有支持的浏览器(IE9及更高版本)之下表现一致;必要时,Vue组件也可以包装于原生自定义原生之内;
        2.Vue组件提供了纯自定义元素所不具备的一些重要功能,最突出的是跨组件数据流,自定义事件通信以及构建工具集成;


    7.准备好了吗?
        我们刚才简单介绍了Vue核心最基本的功能--本教程的其余部分将涵盖这些功能以及其他高级功能更详细的细节;所以请务必读完整个教程;



二.Vue实例
    1.创建一个Vue的实例
        每个Vue应用都是通过Vue函数创建一个新的Vue实例开始的:
        var vm = new Vue({
            //选项
        });

        虽然没有完全遵循MVVM模型,Vue的设计无疑受到了它的启发;因为在文档中经常会使用(ViewModel的简称)这个变量名表示Vue实例;

        当创建一个Vue实例时,你可以传入一个选项对象;这篇教程主要描述的就是如何使用这些选项来创建你想要的行为;作为参考,你也可以在API文档中浏览完整选项列表;

        一个Vue应用由一个通过new Vue创建的根Vue实例,以及可选的嵌套的,可复用的组件树组成;举个例子,一个todo应用的组件树可以是这样的:

        Root Instance
            |-TodoList
                |-TodoItem
                    |-DeleteTodoButton
                    |-EditTodoButton
                |-TodoListFooter
                    |-ClearTodosButton
                    |-TodoListStatistics

        我们会在稍后的组件系统章节具体展开;不过现在,你只需要明白所有的Vue组件都是Vue实例,并且接受相同的选项对象即可(一些根实例特有的选项除外);



    2.数据与方法
        当一个Vue实例被创建时,它向Vue的响应式系统中加入了其data对象中能找到的所有的属性;当这些属性的值发生改变时,视图将会发生"响应",即匹配更新为新的值;

        //我们的数据对象
        var data = {a: 1}

        //该对象被加入到一个Vue实例中
        var vm = new Vue({
            data: data
        });

        //他们引用相同的对象!
        vm.a === data.a //=>true

        //设置属性也会影响到原始数据
        vm.a = 2
        data.a //=>2


        //...反之亦然
        data.a = 3
        vm.a //=>3

        当这些数据改变时,视图会进行重渲染;值得注意的是只有当实例被创建时data中存在的属性是响应式的;也就是说如果你添加一个新的属性,像:
        vm.b = "hi"
        那么对b的改动将不会触发任何视图的更新;如果你知道你会在晚些时候需要一个属性,但是一开始它为空或不存在,那么你仅需要设置一些初始值;比如:
        data:{
            newTodoText: "",
            visitCount: 0,
            hideCompletedTodos: false,
            todos: [],
            error: null
        }

        除了data属性,Vue实例暴露了一些有用的实例属性与方法;他们都有前缀$;以便与用户定义的属性区分开来;例如:
        var data = {a: 1}
        var vm = new Vue({
            el: "#example",
            data: data
        })

        vm.$data === data //=>true
        vm$el === document.getElementById("example") //=>true

        //$watch是一个实例方法
        vm.$watch("a",function(newValue,oldValue){
            //这个回调将在`vm.a`改变后调用;
        })

        在未来,你可以在API参考查阅到完整的实例属性和方法的列表;



    3.实例生命周期
        每个Vue实例在被创建之前都要经过一系列的初始化过程;例如需要设置数据监听,编译模板,挂载实例到DOM,在数据变化时更新DOM等;同时在这个过程中也会运行一些叫做"生命周期钩子"的函数,给予用户机会在一些特定的场景下添加他们自己的代码;

        比如: created钩子可以用来在一个实例被创建之后执行代码:

        new VUe({
            data: {
                a: 1
            },
            created: function(){
                //`this`指向vm实例
                console.log("a is:" + this.a)
            }
        });
        //=>"a is: 1"

        也有一些其它的钩子,在实例生命周期的不同场景下调用,入mounted,uupdated,destroyes;钩子的this指向调用它的Vue实例;

        不要在选项属性或回调上使用"箭头函数",比如:
        created: () => console.log(this.a) 或
        vm.$watch("a",newValue => this.myMethod());因为箭头函数是和父级上下级绑定在一起的,this不会是如你所预期的Vue实例,经过导致
        Uncaught TypeError: Cannot read property of undefined 或
        Uncaught TypeError: this.myMethod is no a function 之类的错误;



    4.生命周期图示
        下图说明了实例的生命周期;你不需要立马弄明白所有的东西,不过随着你的不断学习和使用,它的参考价值会越来越高;


三.模板语法
    1.插值
        1.文本



        2.原始HTML


        3.特性


        4.使用 JavaScript 表达式



    2.指令
        1.参数


        2.修饰符


    3.缩写
        1.v-bind缩写



        2.v-on缩写



四.计算属性和观察者
    1.计算属性
        1.基础例子

        2.计算属性缓存vs方法

        3.计算属性vs侦听属性

        4.计算属性的setter

    2.侦听器


五.Class与Style绑定
    1.绑定HTML Class
        1.对象语法

        2.数组语法

        3.用在组件上


    2.绑定内联样式
        1.对象语法

        2.数组语法

        3.自动添加前缀

        4.多重值


六.条件渲染
    1.v-if
        1.在<template>元素上使用v-if条件渲染

        2.分组

        3.v-else

        4.v-else-if

        5.用key管理可复用的元素

    2.v-show



    3.v-if vs v-show



    4.v-if 与 v-for一起使用



七.列表渲染
    1.用v-for把一个数组对应为一组元素

    2.一个对象的v-for

    3.key

    4.数组更新检测
        1.变异方法


        2.替换数组


        3.注意事项


    5.对象更改检测注意事项

    6.显示过滤/排序结果

    7.一段取值范围的v-for


    8.v-for on a<template>

    9.v-for with v-if

    10.一个组件的v-for



八.事件处理
    1.监听事件

    2.方法事件处理器

    3.内联处理器里的方法

    4.事件修饰符

    5.键值修饰符
        1.自动匹配按键修饰符


    6.系统修饰符
        1. .exact修饰符

        2.鼠标按钮修饰符



    7.为什么在HTML中监听事件?



九.表达输入绑定
    1.基础用法
        1.文本

        2.多行文本

        3.复选框

        4.单选按钮

        5.选择列表


    2.值绑定
        1.复选框

        2.单选按钮

        3.选择列表的选项


    3.修饰符
        1. .lazy

        2. .number

        3. .trim


    4.v-model与组件



十.组件
    1.什么是组件?

    2.使用组件
        1.全局注册

        2.局部注册

        3.DOM模板解析注意事项

        4.data必须是函数

        5.组件组合

    3.Prop
        1.使用Prop传递数据

        2.camelCase vs. kebab-case

        3.动态Prop

        4.字面量语法vs动态语法

        5.单向数据流

        6.Prop验证

    4.非Prop特性
        1.替换/合并现有的特性

    5.自定义事件
        1.使用v-on绑定自定义事件

        2.给组件绑定原生事件

        3. .sync修饰符

        4.使用自定义事件的表单输入组件

        5.自定义组件的v-model

        6.非父子组件的通信

    6.使用插槽分发内容
        1.编译作用域

        2.单个插槽

        3.具名插槽

        4.作用域插槽

    7.动态组件
        1.keep-alive

    8.杂项
        1.编写可复用组件

        2.子组件引用

        3.异步组件

        4.高级异步组件

        5.组件命名约定

        6.递归组件

        7.组件间的循环引用

        8.内联模板

        9.X-Template

        10.对低开销的静态组件使用v-once




[二.过渡&动画]
一.进入/离开&列表过渡
    1.概述

    2.单元素/组件的过渡
        1.过渡的类名

        2.CSS过渡

        3.CSS动画

        4.自定义过渡的类名

        5.同时使用过渡和动画

        6.显性的过渡持续时间

        7.JavaScript钩子

    3.初始渲染的过渡

    4.多个元素的过渡
        1.过渡模式

    5.多个组件的过渡

    6.列表过渡
        1.列表的进入/离开过渡

        2.列表的排序过渡

        3.列表的交错过渡

    7.可复用的过渡

    8.动态过渡


二.状态过渡
    1.状态动画与观察者

    2.动态状态过渡

    3.把过渡放到组件里

    4.赋予设计以生命


[三.可复用性&组合]
一.混合
    1.基础

    2.选项合并

    3.全局混合

    4.自定义选项合并策略


二.自定义指令
    1.简介

    2.钩子函数

    3.钩子函数参数

    4.函数简写

    5.对象字面量


三.渲染函数&JSX
    1.基础

    2.节点,树以及虚拟DOM
        1.虚拟DOM

    3.createElement参数
        1.深入dsata对象

        2.完整示例

        3.约束

    4.使用JavaScript代替模板功能
        1.v-if和v-for

        2.v-model

        3.事件&按键修饰符

        4.插槽


    5.JSX

    6.函数式组件
        1.solts()和children对比


    7.模板编译



四.插件
    1.开发插件

    2.使用插件


五.过滤器


[四.工具]
一.生产环境部署
    1.开启生产环境模式
        1.不用打包工具

        2.用打包工具

    2.预编译模板

    3.提取组件的CSS

    4.跟踪运行时错误


二.单文件组件
    1.介绍
        1.怎么看待关注点分离?


    2.起步
       1.例子沙箱

       2.针对刚接触JavaScript模块开发系统的用户

       3.针对高级用户

三.单元测试
    1.配置和工具

    2.简单的断言

    3.编写可被测试的组件

    4.断言异步更新


四.TypeScript支持
    1.发布为NPM包的官方声明文件

    2.推荐配置

    3.开发工具链

    4.基本用法

    5.基于类的Vue组件

    6.增强类型以配合插件使用




[五.规模化]
一.路由
    1.官方路由

    2.从零开始简单的路由

    3.整合第三方路由



二.状态管理
    1.类Flux状态管理的官方实现
        1.React的开发者请参考以下信息

    2.简单状态管理起步使用


三.服务端渲染
    1.SSR完全指南

    2.Nuxt.js


[六.内在]
一.深入响应式原理
    1.如何追踪变化

    2.检测变化的注意事项

    3.声明响应式属性

    4.异步更新队列


[七.迁移]
一.从Vue.1.x迁移
    1.FAQ

    2.模板
        1.片段实例

    3.生命周期钩子函数
        1.beforeCompile
        2.compiled
        3.attached
        4.detached
        5.init
        6.ready


    4.v-for
        1.v-for遍历数组时的参数顺序
        2.v-for遍历对象时的参数顺序
        3.$index and $key
        4.track-by
        5.v-for范围值

    5.Props
        1.coerce Prop的参数
        2.twoWay Prop的参数
        3.v-bind的.once和.sync修饰符
        4.修改Props
        5.根实例的Props

    6.计算属性
        cache: false

    7.Built-In指令
        1.v-bind真/假值
        2.用v-on监听原生事件
        3.带有debounce的v-model
        4.使用lazy或者number参数的v-model
        5.使用内联value的v-model
        6.v-model with v-for iterated Primitive
        7.Values
        8.带有 !important的v-bind:style
        9.v-el和v-ref
        10.v-show后面使用v-else

    8.自定义指令
        1.指令.literal修饰符

    9.过渡
        1.transition参数
        2.可复用的过渡Vue.transition
        3.过渡的stagger参数

    10.事件
        1.events选项
        2.Vue.directive("on").keyCodes
        3.#dispatch和$broadcast

    11.过滤器
        1.插入文本之外的过滤器
        2.过滤器参数符号
        3.内置文本过滤器
        4.双向过滤器

    12.插槽
        1.重名的插槽
        2.slot样式参数

    13.特殊属性

    14.计算插值todaymark

    15.响应

    16.围绕DOM的实例方法

    17.底层实例方法

    18.实例DOM选项

    19.全局配置

    20.全局API




二.从Vue Router0.7迁移


三.从Vue0.6x迁移到1.0



[八.更多]
一.对比其它框架



二.加入Vue.js社区



三.认识团队





























































